{"version":3,"file":"node_modules_react-native_assets-registry_path-support_js.chunk.bundle","mappings":";;;;;;;;;AAcA,GAAM,CAAAA,kBAAkB,CAAG,CACzB,MAAM,CAAE,MAAM,CACd,GAAG,CAAE,MAAM,CACX,KAAK,CAAE,MAAM,CACb,GAAG,CAAE,OAAO,CACZ,GAAG,CAAE,QAAQ,CACb,GAAG,CAAE,SACP,CAAC,CAED,GAAM,CAAAC,oBAAoB,CAAG,GAAG,CAMhC,QAAS,CAAAC,qBAAqBA,CAACC,KAAa,CAAU,CACpD,GAAIA,KAAK,CAACC,QAAQ,CAAC,CAAC,EAAI,CAAAJ,kBAAkB,CAAE,CAC1C,MAAO,CAAAA,kBAAkB,CAACG,KAAK,CAACC,QAAQ,CAAC,CAAC,CAAC,CAC7C,CAGA,GAAIC,MAAM,CAACC,QAAQ,CAACH,KAAK,CAAC,EAAIA,KAAK,CAAG,CAAC,CAAE,CACvC,MAAO,CAAAI,IAAI,CAACC,KAAK,CAACL,KAAK,CAAGF,oBAAoB,CAAC,CAAG,KAAK,CACzD,CACA,KAAM,IAAI,CAAAQ,KAAK,CAAC,gBAAgB,CAAGN,KAAK,CAACC,QAAQ,CAAC,CAAC,CAAC,CACtD,CAGA,GAAM,CAAAM,iBAAiB,CAAG,GAAI,CAAAC,GAAG,CAAC,CAChC,KAAK,CACL,MAAM,CACN,KAAK,CACL,KAAK,CACL,KAAK,CACL,KAAK,CACL,MAAM,CACN,KAAK,CACN,CAAC,CAEF,QAAS,CAAAC,4BAA4BA,CACnCC,KAAoB,CACpBV,KAAa,CACsB,CACnC,GAAI,CAACO,iBAAiB,CAACI,GAAG,CAACD,KAAK,CAACE,IAAI,CAAC,CAAE,CACtC,MAAO,KAAK,CACd,CACA,GAAM,CAAAC,MAAM,CAAGd,qBAAqB,CAACC,KAAK,CAAC,CAC3C,GAAI,CAACa,MAAM,CAAE,CACX,KAAM,IAAI,CAAAP,KAAK,CACb,6DAA6D,CAC3DN,KAAK,CACL,WAAW,CACXc,IAAI,CAACC,SAAS,CAACL,KAAK,CAAE,IAAI,CAAE,IAAI,CAAC,CACjC,wBAAwB,CACxBI,IAAI,CAACC,SAAS,CAAClB,kBAAkB,CAAE,IAAI,CAAE,IAAI,CACjD,CAAC,CACH,CACA,MAAO,WAAW,CAAGgB,MAAM,CAC7B,CAEA,QAAS,CAAAG,4BAA4BA,CAACN,KAAoB,CAAU,CAClE,MAAO,CAACO,WAAW,CAACP,KAAK,CAAC,CAAG,GAAG,CAAGA,KAAK,CAACQ,IAAI,EAC1CC,WAAW,CAAC,CAAC,CACbC,OAAO,CAAC,KAAK,CAAE,GAAG,CAAC,CACnBA,OAAO,CAAC,eAAe,CAAE,EAAE,CAAC,CAC5BA,OAAO,CAAC,UAAU,CAAE,EAAE,CAAC,CAC5B,CAEA,QAAS,CAAAH,WAAWA,CAACP,KAAoB,CAAU,CACjD,GAAM,CAAAW,QAAQ,CAAGX,KAAK,CAACY,kBAAkB,CACzC,MAAO,CAAAD,QAAQ,CAACE,UAAU,CAAC,GAAG,CAAC,CAAGF,QAAQ,CAACG,MAAM,CAAC,CAAC,CAAC,CAAGH,QAAQ,CACjE,CAEAI,MAAM,CAACC,OAAO,CAAG,CACfjB,4BAA4B,CAA5BA,4BAA4B,CAC5BO,4BAA4B,CAA5BA,4BAA4B,CAC5BC,WAAW,CAAXA,WACF,CAAC","sources":["webpack:///./node_modules/@react-native/assets-registry/path-support.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\nimport type {PackagerAsset} from './registry.js';\n\nconst androidScaleSuffix = {\n  '0.75': 'ldpi',\n  '1': 'mdpi',\n  '1.5': 'hdpi',\n  '2': 'xhdpi',\n  '3': 'xxhdpi',\n  '4': 'xxxhdpi',\n};\n\nconst ANDROID_BASE_DENSITY = 160;\n\n/**\n * FIXME: using number to represent discrete scale numbers is fragile in essence because of\n * floating point numbers imprecision.\n */\nfunction getAndroidAssetSuffix(scale: number): string {\n  if (scale.toString() in androidScaleSuffix) {\n    return androidScaleSuffix[scale.toString()];\n  }\n  // NOTE: Android Gradle Plugin does not fully support the nnndpi format.\n  // See https://issuetracker.google.com/issues/72884435\n  if (Number.isFinite(scale) && scale > 0) {\n    return Math.round(scale * ANDROID_BASE_DENSITY) + 'dpi';\n  }\n  throw new Error('no such scale ' + scale.toString());\n}\n\n// See https://developer.android.com/guide/topics/resources/drawable-resource.html\nconst drawableFileTypes = new Set([\n  'gif',\n  'jpeg',\n  'jpg',\n  'ktx',\n  'png',\n  'svg',\n  'webp',\n  'xml',\n]);\n\nfunction getAndroidResourceFolderName(\n  asset: PackagerAsset,\n  scale: number,\n): string | $TEMPORARY$string<'raw'> {\n  if (!drawableFileTypes.has(asset.type)) {\n    return 'raw';\n  }\n  const suffix = getAndroidAssetSuffix(scale);\n  if (!suffix) {\n    throw new Error(\n      \"Don't know which android drawable suffix to use for scale: \" +\n        scale +\n        '\\nAsset: ' +\n        JSON.stringify(asset, null, '\\t') +\n        '\\nPossible scales are:' +\n        JSON.stringify(androidScaleSuffix, null, '\\t'),\n    );\n  }\n  return 'drawable-' + suffix;\n}\n\nfunction getAndroidResourceIdentifier(asset: PackagerAsset): string {\n  return (getBasePath(asset) + '/' + asset.name)\n    .toLowerCase()\n    .replace(/\\//g, '_') // Encode folder structure in file name\n    .replace(/([^a-z0-9_])/g, '') // Remove illegal chars\n    .replace(/^assets_/, ''); // Remove \"assets_\" prefix\n}\n\nfunction getBasePath(asset: PackagerAsset): string {\n  const basePath = asset.httpServerLocation;\n  return basePath.startsWith('/') ? basePath.substr(1) : basePath;\n}\n\nmodule.exports = {\n  getAndroidResourceFolderName,\n  getAndroidResourceIdentifier,\n  getBasePath,\n};\n"],"names":["androidScaleSuffix","ANDROID_BASE_DENSITY","getAndroidAssetSuffix","scale","toString","Number","isFinite","Math","round","Error","drawableFileTypes","Set","getAndroidResourceFolderName","asset","has","type","suffix","JSON","stringify","getAndroidResourceIdentifier","getBasePath","name","toLowerCase","replace","basePath","httpServerLocation","startsWith","substr","module","exports"],"sourceRoot":""}