{"version":3,"file":"node_modules_react-native-responsive-screen_index_js.chunk.bundle","mappings":";;;;;;;;+LACA,IAAAA,YAAA,CAAAC,mBAAA,uFAGA,GAAI,CAAAC,WAAW,CAAGC,uBAAU,CAACC,GAAG,CAAC,QAAQ,CAAC,CAACC,KAAK,CAGhD,GAAI,CAAAC,YAAY,CAAGH,uBAAU,CAACC,GAAG,CAAC,QAAQ,CAAC,CAACG,MAAM,CAQlD,GAAM,CAAAC,mBAAmB,CAAAC,2BAAA,CAAG,QAAtB,CAAAD,mBAAmBA,CAAGE,YAAY,CAAI,CAE1C,GAAM,CAAAC,SAAS,CAAG,MAAO,CAAAD,YAAY,GAAK,QAAQ,CAAGA,YAAY,CAAGE,UAAU,CAACF,YAAY,CAAC,CAI5F,MAAO,CAAAG,uBAAU,CAACC,mBAAmB,CAACZ,WAAW,CAAGS,SAAS,CAAG,GAAG,CAAC,CACtE,CAAC,CAQD,GAAM,CAAAI,oBAAoB,CAAAN,4BAAA,CAAG,QAAvB,CAAAM,oBAAoBA,CAAGC,aAAa,CAAI,CAE5C,GAAM,CAAAC,UAAU,CAAG,MAAO,CAAAD,aAAa,GAAK,QAAQ,CAAGA,aAAa,CAAGJ,UAAU,CAACI,aAAa,CAAC,CAIhG,MAAO,CAAAH,uBAAU,CAACC,mBAAmB,CAACR,YAAY,CAAGW,UAAU,CAAG,GAAG,CAAC,CACxE,CAAC,CAWD,GAAM,CAAAC,uBAAuB,CAAAT,+BAAA,CAAG,QAA1B,CAAAS,uBAAuBA,CAAGC,IAAI,CAAI,CACtChB,uBAAU,CAACiB,gBAAgB,CAAC,QAAQ,CAAE,SAAAC,aAAa,CAAI,CAErDnB,WAAW,CAAGmB,aAAa,CAACC,MAAM,CAACjB,KAAK,CACxCC,YAAY,CAAGe,aAAa,CAACC,MAAM,CAACf,MAAM,CAG1CY,IAAI,CAACI,QAAQ,CAAC,CACZC,WAAW,CAAEtB,WAAW,CAAGI,YAAY,CAAG,UAAU,CAAG,WACzD,CAAC,CAAC,CACJ,CAAC,CAAC,CACJ,CAAC,CAQD,GAAM,CAAAmB,yBAAyB,CAAAhB,iCAAA,CAAG,QAA5B,CAAAgB,yBAAyBA,CAAA,CAAS,CACtCtB,uBAAU,CAACuB,mBAAmB,CAAC,QAAQ,CAAE,UAAM,CAAC,CAAC,CAAC,CACpD,CAAC","sources":["webpack:///./node_modules/react-native-responsive-screen/index.js"],"sourcesContent":["// packages\nimport { Dimensions, PixelRatio } from 'react-native';\n\n// Retrieve initial screen's width\nlet screenWidth = Dimensions.get('window').width;\n\n// Retrieve initial screen's height\nlet screenHeight = Dimensions.get('window').height;\n\n/**\n * Converts provided width percentage to independent pixel (dp).\n * @param  {string} widthPercent The percentage of screen's width that UI element should cover\n *                               along with the percentage symbol (%).\n * @return {number}              The calculated dp depending on current device's screen width.\n */\nconst widthPercentageToDP = widthPercent => {\n  // Parse string percentage input and convert it to number.\n  const elemWidth = typeof widthPercent === \"number\" ? widthPercent : parseFloat(widthPercent);\n\n  // Use PixelRatio.roundToNearestPixel method in order to round the layout\n  // size (dp) to the nearest one that correspons to an integer number of pixels.\n  return PixelRatio.roundToNearestPixel(screenWidth * elemWidth / 100);\n};\n\n/**\n * Converts provided height percentage to independent pixel (dp).\n * @param  {string} heightPercent The percentage of screen's height that UI element should cover\n *                                along with the percentage symbol (%).\n * @return {number}               The calculated dp depending on current device's screen height.\n */\nconst heightPercentageToDP = heightPercent => {\n  // Parse string percentage input and convert it to number.\n  const elemHeight = typeof heightPercent === \"number\" ? heightPercent : parseFloat(heightPercent);\n\n  // Use PixelRatio.roundToNearestPixel method in order to round the layout\n  // size (dp) to the nearest one that correspons to an integer number of pixels.\n  return PixelRatio.roundToNearestPixel(screenHeight * elemHeight / 100);\n};\n\n/**\n * Event listener function that detects orientation change (every time it occurs) and triggers \n * screen rerendering. It does that, by changing the state of the screen where the function is\n * called. State changing occurs for a new state variable with the name 'orientation' that will\n * always hold the current value of the orientation after the 1st orientation change.\n * Invoke it inside the screen's constructor or in componentDidMount lifecycle method.\n * @param {object} that Screen's class component this variable. The function needs it to\n *                      invoke setState method and trigger screen rerender (this.setState()).\n */\nconst listenOrientationChange = that => {\n  Dimensions.addEventListener('change', newDimensions => {\n    // Retrieve and save new dimensions\n    screenWidth = newDimensions.window.width;\n    screenHeight = newDimensions.window.height;\n\n    // Trigger screen's rerender with a state update of the orientation variable\n    that.setState({\n      orientation: screenWidth < screenHeight ? 'portrait' : 'landscape'\n    });\n  });\n};\n\n/**\n * Wrapper function that removes orientation change listener and should be invoked in\n * componentWillUnmount lifecycle method of every class component (UI screen) that\n * listenOrientationChange function has been invoked. This should be done in order to\n * avoid adding new listeners every time the same component is re-mounted.\n */\nconst removeOrientationListener = () => {\n  Dimensions.removeEventListener('change', () => {});\n};\n\nexport {\n  widthPercentageToDP,\n  heightPercentageToDP,\n  listenOrientationChange,\n  removeOrientationListener\n};\n"],"names":["_reactNative","require","screenWidth","Dimensions","get","width","screenHeight","height","widthPercentageToDP","exports","widthPercent","elemWidth","parseFloat","PixelRatio","roundToNearestPixel","heightPercentageToDP","heightPercent","elemHeight","listenOrientationChange","that","addEventListener","newDimensions","window","setState","orientation","removeOrientationListener","removeEventListener"],"sourceRoot":""}