{"version":3,"file":"vendors-node_modules_react-native-async-storage_async-storage_src_index_ts.chunk.bundle","mappings":"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","sources":["webpack:///./node_modules/@react-native-async-storage/async-storage/src/AsyncStorage.native.ts","webpack:///./node_modules/@react-native-async-storage/async-storage/src/RCTAsyncStorage.ts","webpack:///./node_modules/@react-native-async-storage/async-storage/src/helpers.ts","webpack:///./node_modules/@react-native-async-storage/async-storage/src/hooks.ts","webpack:///./node_modules/@react-native-async-storage/async-storage/src/index.ts","webpack:///./node_modules/@react-native-async-storage/async-storage/src/shouldFallbackToLegacyNativeModule.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {\n  checkValidArgs,\n  checkValidInput,\n  convertError,\n  convertErrors,\n} from \"./helpers\";\nimport RCTAsyncStorage from \"./RCTAsyncStorage\";\nimport type {\n  AsyncStorageStatic,\n  ErrorLike,\n  KeyValuePair,\n  MultiRequest,\n} from \"./types\";\n\nif (!RCTAsyncStorage) {\n  throw new Error(`[@RNC/AsyncStorage]: NativeModule: AsyncStorage is null.\n\nTo fix this issue try these steps:\n\n  • Uninstall, rebuild and restart the app.\n\n  • Run the packager with \\`--reset-cache\\` flag.\n\n  • If you are using CocoaPods on iOS, run \\`pod install\\` in the \\`ios\\` directory, then rebuild and re-run the app.\n\n  • Make sure your project's \\`package.json\\` depends on \\`@react-native-async-storage/async-storage\\`, even if you only depend on it indirectly through other dependencies. CLI only autolinks native modules found in your \\`package.json\\`.\n\n  • If this happens while testing with Jest, check out how to integrate AsyncStorage here: https://react-native-async-storage.github.io/async-storage/docs/advanced/jest\n\nIf none of these fix the issue, please open an issue on the GitHub repository: https://github.com/react-native-async-storage/async-storage/issues\n`);\n}\n\n/**\n * `AsyncStorage` is a simple, unencrypted, asynchronous, persistent, key-value\n * storage system that is global to the app. It should be used instead of\n * LocalStorage.\n *\n * See https://react-native-async-storage.github.io/async-storage/docs/api\n */\nconst AsyncStorage = ((): AsyncStorageStatic => {\n  let _getRequests: MultiRequest[] = [];\n  let _getKeys: string[] = [];\n  let _immediate: ReturnType<typeof setImmediate> | null = null;\n\n  return {\n    /**\n     * Fetches an item for a `key` and invokes a callback upon completion.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#getitem\n     */\n    getItem: (key, callback) => {\n      return new Promise((resolve, reject) => {\n        checkValidInput(key);\n        RCTAsyncStorage.multiGet(\n          [key],\n          (errors?: ErrorLike[], result?: string[][]) => {\n            // Unpack result to get value from [[key,value]]\n            const value = result?.[0]?.[1] ? result[0][1] : null;\n            const errs = convertErrors(errors);\n            callback?.(errs?.[0], value);\n            if (errs) {\n              reject(errs[0]);\n            } else {\n              resolve(value);\n            }\n          }\n        );\n      });\n    },\n\n    /**\n     * Sets the value for a `key` and invokes a callback upon completion.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#setitem\n     */\n    setItem: (key, value, callback) => {\n      return new Promise((resolve, reject) => {\n        checkValidInput(key, value);\n        RCTAsyncStorage.multiSet([[key, value]], (errors?: ErrorLike[]) => {\n          const errs = convertErrors(errors);\n          callback?.(errs?.[0]);\n          if (errs) {\n            reject(errs[0]);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Removes an item for a `key` and invokes a callback upon completion.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#removeitem\n     */\n    removeItem: (key, callback) => {\n      return new Promise((resolve, reject) => {\n        checkValidInput(key);\n        RCTAsyncStorage.multiRemove([key], (errors?: ErrorLike[]) => {\n          const errs = convertErrors(errors);\n          callback?.(errs?.[0]);\n          if (errs) {\n            reject(errs[0]);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Merges an existing `key` value with an input value, assuming both values\n     * are stringified JSON.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#mergeitem\n     */\n    mergeItem: (key, value, callback) => {\n      return new Promise((resolve, reject) => {\n        checkValidInput(key, value);\n        RCTAsyncStorage.multiMerge([[key, value]], (errors?: ErrorLike[]) => {\n          const errs = convertErrors(errors);\n          callback?.(errs?.[0]);\n          if (errs) {\n            reject(errs[0]);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Erases *all* `AsyncStorage` for all clients, libraries, etc. You probably\n     * don't want to call this; use `removeItem` or `multiRemove` to clear only\n     * your app's keys.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#clear\n     */\n    clear: (callback) => {\n      return new Promise((resolve, reject) => {\n        RCTAsyncStorage.clear((error?: ErrorLike) => {\n          const err = convertError(error);\n          callback?.(err);\n          if (err) {\n            reject(err);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Gets *all* keys known to your app; for all callers, libraries, etc.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#getallkeys\n     */\n    getAllKeys: (callback) => {\n      return new Promise((resolve, reject) => {\n        RCTAsyncStorage.getAllKeys((error?: ErrorLike, keys?: string[]) => {\n          const err = convertError(error);\n          callback?.(err, keys);\n          if (keys) {\n            resolve(keys);\n          } else {\n            reject(err);\n          }\n        });\n      });\n    },\n\n    /**\n     * The following batched functions are useful for executing a lot of\n     * operations at once, allowing for native optimizations and provide the\n     * convenience of a single callback after all operations are complete.\n     *\n     * These functions return arrays of errors, potentially one for every key.\n     * For key-specific errors, the Error object will have a key property to\n     * indicate which key caused the error.\n     */\n\n    /**\n     * Flushes any pending requests using a single batch call to get the data.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#flushgetrequests\n     * */\n    flushGetRequests: () => {\n      const getRequests = _getRequests;\n      const getKeys = _getKeys;\n\n      _getRequests = [];\n      _getKeys = [];\n\n      RCTAsyncStorage.multiGet(\n        getKeys,\n        (errors?: ErrorLike[], result?: string[][]) => {\n          // Even though the runtime complexity of this is theoretically worse vs if we used a map,\n          // it's much, much faster in practice for the data sets we deal with (we avoid\n          // allocating result pair arrays). This was heavily benchmarked.\n          //\n          // Is there a way to avoid using the map but fix the bug in this breaking test?\n          // https://github.com/facebook/react-native/commit/8dd8ad76579d7feef34c014d387bf02065692264\n          const map: Record<string, string> = {};\n          result?.forEach(([key, value]) => {\n            map[key] = value;\n            return value;\n          });\n          const reqLength = getRequests.length;\n\n          /**\n           * As mentioned few lines above, this method could be called with the array of potential error,\n           * in case of anything goes wrong. The problem is, if any of the batched calls fails\n           * the rest of them would fail too, but the error would be consumed by just one. The rest\n           * would simply return `undefined` as their result, rendering false negatives.\n           *\n           * In order to avoid this situation, in case of any call failing,\n           * the rest of them will be rejected as well (with the same error).\n           */\n          const errorList = convertErrors(errors);\n          const error = errorList?.length ? errorList[0] : null;\n\n          for (let i = 0; i < reqLength; i++) {\n            const request = getRequests[i];\n            if (error) {\n              request.callback?.(errorList);\n              request.reject?.(error);\n              continue;\n            }\n            const requestResult = request.keys.map<KeyValuePair>((key) => [\n              key,\n              map[key],\n            ]);\n            request.callback?.(null, requestResult);\n            request.resolve?.(requestResult);\n          }\n        }\n      );\n    },\n\n    /**\n     * This allows you to batch the fetching of items given an array of `key`\n     * inputs. Your callback will be invoked with an array of corresponding\n     * key-value pairs found.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multiget\n     */\n    multiGet: (keys, callback) => {\n      if (!_immediate) {\n        _immediate = setImmediate(() => {\n          _immediate = null;\n          AsyncStorage.flushGetRequests();\n        });\n      }\n\n      const getRequest: MultiRequest = {\n        keys: keys,\n        callback: callback,\n        // do we need this?\n        keyIndex: _getKeys.length,\n      };\n\n      const promiseResult = new Promise<readonly KeyValuePair[]>(\n        (resolve, reject) => {\n          getRequest.resolve = resolve;\n          getRequest.reject = reject;\n        }\n      );\n\n      _getRequests.push(getRequest);\n      // avoid fetching duplicates\n      keys.forEach((key) => {\n        if (_getKeys.indexOf(key) === -1) {\n          _getKeys.push(key);\n        }\n      });\n\n      return promiseResult;\n    },\n\n    /**\n     * Use this as a batch operation for storing multiple key-value pairs. When\n     * the operation completes you'll get a single callback with any errors.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multiset\n     */\n    multiSet: (keyValuePairs, callback) => {\n      checkValidArgs(keyValuePairs, callback);\n      return new Promise((resolve, reject) => {\n        keyValuePairs.forEach(([key, value]) => {\n          checkValidInput(key, value);\n        });\n\n        RCTAsyncStorage.multiSet(keyValuePairs, (errors?: ErrorLike[]) => {\n          const error = convertErrors(errors);\n          callback?.(error);\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Call this to batch the deletion of all keys in the `keys` array.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multiremove\n     */\n    multiRemove: (keys, callback) => {\n      return new Promise((resolve, reject) => {\n        keys.forEach((key) => checkValidInput(key));\n\n        RCTAsyncStorage.multiRemove(keys, (errors?: ErrorLike[]) => {\n          const error = convertErrors(errors);\n          callback?.(error);\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Batch operation to merge in existing and new values for a given set of\n     * keys. This assumes that the values are stringified JSON.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multimerge\n     */\n    multiMerge: (keyValuePairs, callback) => {\n      return new Promise((resolve, reject) => {\n        RCTAsyncStorage.multiMerge(keyValuePairs, (errors?: ErrorLike[]) => {\n          const error = convertErrors(errors);\n          callback?.(error);\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n  };\n})();\n\nexport default AsyncStorage;\n","import { NativeModules, TurboModuleRegistry } from \"react-native\";\nimport { shouldFallbackToLegacyNativeModule } from \"./shouldFallbackToLegacyNativeModule\";\n\n// TurboModuleRegistry falls back to NativeModules so we don't have to try go\n// assign NativeModules' counterparts if TurboModuleRegistry would resolve\n// with undefined.\nlet RCTAsyncStorage = TurboModuleRegistry\n  ? TurboModuleRegistry.get(\"PlatformLocalStorage\") || // Support for external modules, like react-native-windows\n    TurboModuleRegistry.get(\"RNC_AsyncSQLiteDBStorage\") ||\n    TurboModuleRegistry.get(\"RNCAsyncStorage\")\n  : NativeModules[\"PlatformLocalStorage\"] || // Support for external modules, like react-native-windows\n    NativeModules[\"RNC_AsyncSQLiteDBStorage\"] ||\n    NativeModules[\"RNCAsyncStorage\"];\n\nif (!RCTAsyncStorage && shouldFallbackToLegacyNativeModule()) {\n  if (TurboModuleRegistry) {\n    RCTAsyncStorage =\n      TurboModuleRegistry.get(\"AsyncSQLiteDBStorage\") ||\n      TurboModuleRegistry.get(\"AsyncLocalStorage\");\n  } else {\n    RCTAsyncStorage =\n      NativeModules[\"AsyncSQLiteDBStorage\"] ||\n      NativeModules[\"AsyncLocalStorage\"];\n  }\n}\n\nexport default RCTAsyncStorage;\n","import type { ErrorLike } from \"./types\";\n\nexport function checkValidArgs(keyValuePairs: unknown[], callback: unknown) {\n  if (\n    !Array.isArray(keyValuePairs) ||\n    keyValuePairs.length === 0 ||\n    !Array.isArray(keyValuePairs[0])\n  ) {\n    throw new Error(\n      \"[AsyncStorage] Expected array of key-value pairs as first argument to multiSet\"\n    );\n  }\n\n  if (callback && typeof callback !== \"function\") {\n    if (Array.isArray(callback)) {\n      throw new Error(\n        \"[AsyncStorage] Expected function as second argument to multiSet. Did you forget to wrap key-value pairs in an array for the first argument?\"\n      );\n    }\n\n    throw new Error(\n      \"[AsyncStorage] Expected function as second argument to multiSet\"\n    );\n  }\n}\n\nexport function checkValidInput(...input: unknown[]) {\n  const [key, value] = input;\n\n  if (typeof key !== \"string\") {\n    // eslint-disable-next-line no-console\n    console.warn(\n      `[AsyncStorage] Using ${typeof key} type for key is not supported. This can lead to unexpected behavior/errors. Use string instead.\\nKey passed: ${key}\\n`\n    );\n  }\n\n  if (input.length > 1 && typeof value !== \"string\") {\n    if (value == null) {\n      throw new Error(\n        `[AsyncStorage] Passing null/undefined as value is not supported. If you want to remove value, Use .removeItem method instead.\\nPassed value: ${value}\\nPassed key: ${key}\\n`\n      );\n    } else {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `[AsyncStorage] The value for key \"${key}\" is not a string. This can lead to unexpected behavior/errors. Consider stringifying it.\\nPassed value: ${value}\\nPassed key: ${key}\\n`\n      );\n    }\n  }\n}\n\nexport function convertError(error?: ErrorLike): Error | null {\n  if (!error) {\n    return null;\n  }\n\n  const out = new Error(error.message) as Error & ErrorLike;\n  out[\"key\"] = error.key;\n  return out;\n}\n\nexport function convertErrors(\n  errs?: ErrorLike[]\n): ReadonlyArray<Error | null> | null {\n  const errors = ensureArray(errs);\n  return errors ? errors.map((e) => convertError(e)) : null;\n}\n\nfunction ensureArray(e?: ErrorLike | ErrorLike[]): ErrorLike[] | null {\n  if (Array.isArray(e)) {\n    return e.length === 0 ? null : e;\n  } else if (e) {\n    return [e];\n  } else {\n    return null;\n  }\n}\n","import AsyncStorage from \"./AsyncStorage\";\nimport type { AsyncStorageHook } from \"./types\";\n\nexport function useAsyncStorage(key: string): AsyncStorageHook {\n  return {\n    getItem: (...args) => AsyncStorage.getItem(key, ...args),\n    setItem: (...args) => AsyncStorage.setItem(key, ...args),\n    mergeItem: (...args) => AsyncStorage.mergeItem(key, ...args),\n    removeItem: (...args) => AsyncStorage.removeItem(key, ...args),\n  };\n}\n","import AsyncStorage from \"./AsyncStorage\";\n\nexport { useAsyncStorage } from \"./hooks\";\n\nexport type { AsyncStorageStatic } from \"./types\";\n\nexport default AsyncStorage;\n","import { NativeModules } from \"react-native\";\n\nexport function shouldFallbackToLegacyNativeModule(): boolean {\n  const expoConstants =\n    NativeModules[\"NativeUnimoduleProxy\"]?.modulesConstants?.ExponentConstants;\n\n  if (expoConstants) {\n    /**\n     * In SDK <= 39, appOwnership is defined in managed apps but executionEnvironment is not.\n     * In bare React Native apps using expo-constants, appOwnership is never defined, so\n     * isLegacySdkVersion will be false in that context.\n     */\n    const isLegacySdkVersion =\n      expoConstants.appOwnership && !expoConstants.executionEnvironment;\n\n    /**\n     * Expo managed apps don't include the @react-native-async-storage/async-storage\n     * native modules yet, but the API interface is the same, so we can use the version\n     * exported from React Native still.\n     *\n     * If in future releases (eg: @react-native-async-storage/async-storage >= 2.0.0) this\n     * will likely not be valid anymore, and the package will need to be included in the Expo SDK\n     * to continue to work.\n     */\n    if (\n      isLegacySdkVersion ||\n      [\"storeClient\", \"standalone\"].includes(expoConstants.executionEnvironment)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}\n"],"names":["_helpers","require","_RCTAsyncStorage","_interopRequireDefault","RCTAsyncStorage","Error","AsyncStorage","_getRequests","_getKeys","_immediate","getItem","key","callback","Promise","resolve","reject","checkValidInput","multiGet","errors","result","_result$","value","errs","convertErrors","setItem","multiSet","removeItem","multiRemove","mergeItem","multiMerge","clear","error","err","convertError","getAllKeys","keys","flushGetRequests","getRequests","getKeys","map","forEach","_ref","_ref2","_slicedToArray2","default","reqLength","length","errorList","i","request","requestResult","setImmediate","getRequest","keyIndex","promiseResult","push","indexOf","keyValuePairs","checkValidArgs","_ref3","_ref4","_default","exports","_reactNative","_shouldFallbackToLegacyNativeModule","TurboModuleRegistry","get","NativeModules","shouldFallbackToLegacyNativeModule","Array","isArray","_len","arguments","input","_key","console","warn","out","message","ensureArray","e","_AsyncStorage","useAsyncStorage","args","apply","concat","_len2","_key2","_len3","_key3","_len4","_key4","_hooks","_NativeModules$Native","_NativeModules$Native2","expoConstants","modulesConstants","ExponentConstants","isLegacySdkVersion","appOwnership","executionEnvironment","includes"],"sourceRoot":""}